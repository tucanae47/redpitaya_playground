/// Autogenerated DO NOT EDIT
///
/// (c) Koheron

#ifndef __DRIVERS_MEMORY_HPP__
#define __DRIVERS_MEMORY_HPP__

#include <array>
#include <tuple>
#include <cstdint>

#include "../zynq_fclk.hpp"

extern "C" {
  #include <sys/mman.h> // PROT_READ, PROT_WRITE
}

constexpr auto instrument_name = "pulse-generator";

namespace mem {
constexpr size_t control = 0;
constexpr uintptr_t control_addr = 0x60000000;
constexpr uint32_t control_range = 4*1024;
constexpr uint32_t control_nblocks = 1;
constexpr size_t status = 1;
constexpr uintptr_t status_addr = 0x50000000;
constexpr uint32_t status_range = 4*1024;
constexpr uint32_t status_nblocks = 1;
constexpr size_t dac = 2;
constexpr uintptr_t dac_addr = 0x40000000;
constexpr uint32_t dac_range = 32*1024;
constexpr uint32_t dac_nblocks = 1;
constexpr size_t adc_fifo = 3;
constexpr uintptr_t adc_fifo_addr = 0x43C10000;
constexpr uint32_t adc_fifo_range = 64*1024;
constexpr uint32_t adc_fifo_nblocks = 1;


constexpr size_t count = 4;

constexpr std::array<std::tuple<uintptr_t, uint32_t, uint32_t, uint32_t>, count> memory_array = {{
    std::make_tuple(control_addr, control_range, PROT_READ|PROT_WRITE, control_nblocks),
        std::make_tuple(status_addr, status_range, PROT_READ|PROT_WRITE, status_nblocks),
        std::make_tuple(dac_addr, dac_range, PROT_READ|PROT_WRITE, dac_nblocks),
        std::make_tuple(adc_fifo_addr, adc_fifo_range, PROT_READ|PROT_WRITE, adc_fifo_nblocks)
        }};

} // namespace mem

namespace reg {
// -- Control offsets
constexpr uint32_t led = 0;
static_assert(led < mem::control_range, "Invalid control register offset led");
constexpr uint32_t trigger = 4;
static_assert(trigger < mem::control_range, "Invalid control register offset trigger");
constexpr uint32_t pulse_width = 8;
static_assert(pulse_width < mem::control_range, "Invalid control register offset pulse_width");
constexpr uint32_t pulse_period = 12;
static_assert(pulse_period < mem::control_range, "Invalid control register offset pulse_period");

// -- PS Control offsets

// -- Status offsets
constexpr uint32_t adc0 = 8;
static_assert(adc0 < mem::status_range, "Invalid status register offset adc0");
constexpr uint32_t adc1 = 12;
static_assert(adc1 < mem::status_range, "Invalid status register offset adc1");
constexpr uint32_t count = 16;
static_assert(count < mem::status_range, "Invalid status register offset count");

// -- PS Status offsets


constexpr uint32_t dna = 0;
} // namespace reg

namespace prm {
constexpr uint32_t fclk0 = 166666667;
constexpr uint32_t bram_addr_width = 13;
constexpr uint32_t dac_width = 14;
constexpr uint32_t adc_width = 14;
constexpr uint32_t n_adc = 2;


} // namespace prm

namespace zynq_clocks {

inline void set_clocks(ZynqFclk& fclk) {

fclk.set("fclk0", 166666667);


}
}

// -- JSONified config
constexpr auto CFG_JSON = "{\"name\":\"pulse-generator\",\"board\":\"boards/red-pitaya\",\"version\":\"0.1.2\",\"cores\":[\"fpga/cores/redp_adc_v1_0\",\"fpga/cores/redp_dac_v1_0\",\"fpga/cores/axi_ctl_register_v1_0\",\"fpga/cores/axi_sts_register_v1_0\",\"fpga/cores/dna_reader_v1_0\",\"fpga/cores/pulse_generator_v1_0\"],\"memory\":[{\"name\":\"control\",\"offset\":\"0x60000000\",\"range\":\"4K\",\"n_blocks\":1,\"prot_flag\":\"PROT_READ|PROT_WRITE\"},{\"name\":\"status\",\"offset\":\"0x50000000\",\"range\":\"4K\",\"n_blocks\":1,\"prot_flag\":\"PROT_READ|PROT_WRITE\"},{\"name\":\"dac\",\"offset\":\"0x40000000\",\"range\":\"32K\",\"n_blocks\":1,\"prot_flag\":\"PROT_READ|PROT_WRITE\"},{\"name\":\"adc_fifo\",\"offset\":\"0x43C10000\",\"range\":\"64K\",\"n_blocks\":1,\"prot_flag\":\"PROT_READ|PROT_WRITE\"}],\"control_registers\":[\"led\",\"trigger\",\"pulse_width\",\"pulse_period\"],\"status_registers\":[\"adc0\",\"adc1\",\"count\"],\"parameters\":{\"fclk0\":166666667,\"bram_addr_width\":13,\"dac_width\":14,\"adc_width\":14,\"n_adc\":2},\"xdc\":[\"boards/red-pitaya/config/ports.xdc\",\"boards/red-pitaya/config/clocks.xdc\"],\"drivers\":[\"./pulse.hpp\",\"server/drivers/common.hpp\"],\"web\":[\"web/koheron.ts\",\"web/jquery.flot.d.ts\",\"./web/pulse_generator.ts\",\"./web/app.ts\",\"./web/control.ts\",\"./web/plot.ts\",\"web/plot-basics/plot-basics.ts\",\"web/plot-basics/plot-basics.html\",\"./web/index.html\",\"web/main.css\"],\"ps_control_registers\":[],\"ps_status_registers\":[]}";

#endif // __DRIVERS_MEMORY_HPP__